{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\r\nimport readingTime from 'reading-time';\r\n\r\nconst Post = defineDocumentType(() => ({\r\n  name: 'Post',\r\n  contentType: 'mdx',\r\n  filePathPattern: 'posts/*.mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      description: 'The title of the post',\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: 'string',\r\n      description: 'The description or excerpt of the post',\r\n      required: true,\r\n    },\r\n    bannerUrl: {\r\n      type: 'string',\r\n      description: 'The url of the banner for the post',\r\n      required: true,\r\n    },\r\n    tags: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      required: true,\r\n    },\r\n    publishedAt: {\r\n      type: 'string',\r\n      description: 'The date when the post was published',\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: 'string',\r\n      resolve: (post) => post._raw.sourceFileName.replace(/\\.mdx$/, ''),\r\n    },\r\n    url: {\r\n      type: 'string',\r\n      resolve: (post) => `/blogs/${post._raw.sourceFileName.replace(/\\.mdx$/, '')}`,\r\n    },\r\n    timeToRead: {\r\n      type: 'string',\r\n      resolve: (post) => readingTime(post.body.raw).text,\r\n    },\r\n  },\r\n}));\r\n\r\nconst Gospel = defineDocumentType(() => ({\r\n  name: 'Gospel',\r\n  contentType: 'mdx',\r\n  filePathPattern: 'gospel/*.mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      description: 'The title of the gospel page',\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: 'string',\r\n      description: 'A short description of the gospel page',\r\n      required: true,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: 'content',\r\n  documentTypes: [Post, Gospel],\r\n});\r\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,iBAAiB;AAExB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,KAAK,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,IAClE;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,UAAU,KAAK,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,IAC5E;AAAA,IACA,YAAY;AAAA,MACV,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,YAAY,KAAK,KAAK,GAAG,EAAE;AAAA,IAChD;AAAA,EACF;AACF,EAAE;AAEF,IAAM,SAAS,mBAAmB,OAAO;AAAA,EACvC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,MAAM;AAC9B,CAAC;",
  "names": []
}
